<!-- We need to create a dispatcher-servlet file for creating the bean to 
	resolve the view for every mapping and we are scanning the package where 
	other controllers could be found. NOTE: The name of the file will be the 
	servlet_name-servlet.xml as per the convention else we have to do additional 
	configuration that will be shown later. -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:wf="http://www.springframework.org/schema/webflow-config"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context.xsd
   http://www.springframework.org/schema/mvc
   http://www.springframework.org/schema/mvc/spring-mvc.xsd
   http://www.springframework.org/schema/webflow-config
    http://www.springframework.org/schema/webflow-config/spring-webflow-config.xsd   
   ">

	<!-- context is added to let the other dispatcher servlet know where the 
		other front controllers are -->
	<context:component-scan
		base-package="com.springmvc.flipzonfrontend"></context:component-scan>
		
		<!--  let the spring framework know where to get that categoryDAO dependency from. Add an context
element in dispatcher servlet to scan the packages in the backend. -->
<!-- Moving it to spring security file -->
<!--  <context:component-scan
		base-package="com.springmvc.demo.FlipzonBackEnd"></context:component-scan>-->

	<!--Configure the ViewResolver inside the dispatcher-servlet to map the 
		logical name to the actual physical filename. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.support.StandardServletMultipartResolver"/>
	
	
	<!-- Configure it to load the static resources and tell it is annotation driven -->
	<mvc:annotation-driven />
	
	<!-- To get the resources mapping specify any mapping name and the location that it is located -->	
	<mvc:resources location="/assets/" mapping="/resources/**" />
	
	
		<!-- Webflow configuration -->
		
	<!--  Add the flow-executor that will handle the flow indicating the entry point in the project -->
	
	
	<wf:flow-registry id="flowRegistry" flow-builder-services="flowBuilderServices">
 <wf:flow-location path="/WEB-INF/views/flows/registration/signup-flow.xml" />
</wf:flow-registry>
	 <wf:flow-executor id="flowExecutor"  />
	 
	 
	
	<!-- We have to also specify the flow-registry attribute and specify the id of flow-registry element if not
provided it would automatically look for element with id of flowRegistry -->
<!-- 
	<wf:flow-registry id="flowRegistry" base-path="/WEB-INF/views/flows/registration" flow-builder-services="flowBuilderServices">
		<wf:flow-location-pattern value="/**/*-flow.xml"/>		
	</wf:flow-registry>
	 -->
	
	<!-- To customize the flow-registry and provide additional configuration we are going to use the flow builder-services but first we would be adding flow-builder-services="flowBuilderServices" in the
registry. -->
   	<wf:flow-builder-services id="flowBuilderServices"
    	view-factory-creator="viewFactoryCreator"
    	validator="validator"
   	/>
 	
 	
 	<!-- Spring Web Flow provides a Spring MVC handler adapter called FlowHandlerAdapter. This handler adapter is the bridge between DispatcherServlet and the flow executor, handling requests and manipulating the flow based on those requests. -->
<!-- Enables FlowHandler URL mapping -->
<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerAdapter">
	<property name="flowExecutor" ref="flowExecutor" />
</bean>
	
	
	<!-- DispatcherServlet knows how to dispatch requests by consulting with one or more handler mappings.For web flows, FlowHandlerMapping helps DispatcherServlet know to send flow requests to the FlowHandlerAdapter -->
	
	<!-- Here for any incoming request, the Spring Webflow registry will be checked to see whether any guided flows are configured. That is why we make the order for Spring Webflow -1. The flow registry contains all the flows available in the application. If a guided flow is found then the flow executor is initiated.
	 -->
	
	<bean class="org.springframework.webflow.mvc.servlet.FlowHandlerMapping">
		<property name="flowRegistry" ref="flowRegistry" />
		<property name="order" value="-1" />
	</bean>	
	
	<!--  For resolving views for web flow we will add one more bean which will point to the view resolver -->
	
   	<bean id="viewFactoryCreator" class="org.springframework.webflow.mvc.builder.MvcViewFactoryCreator">
         <property name="viewResolvers" ref="viewResolver" />
 	</bean>	
	
	<!-- Validator Bean -->
	<!--  Add the validator attribute to our flow-builder-services element to use the validation service. The bean with id "validator" will provide validation service to spring form in views specified through spring webflow configuration -->
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/> 	

</beans>